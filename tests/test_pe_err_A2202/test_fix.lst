JWasm v2.20, Oct 23 2025
test.err.A2202.asm
                                ; test.err.A2202.asm

                                ; Test for Error A2202
                                ; Error A2202: Output format doesn't support externals

                                ; Build:
                                ; make

                                ; Test OK:
                                ; jwasm -pe -Fo=test_ok test.err.A2202.asm

                                ; Test FAIL:
                                ; jwasm -pe -Fo=test_fail -DDIRECT_CALL=1 test.err.A2202.asm

                                ; Compiles OK only if DIRECT_CALL is not defined

                                ; Tested with:
                                ; JWasm v2.19, Jan 24 2025

                                ; Fixed in:
                                ; JWasm v2.20, Oct 23 2025

                                ; Contact:
                                ; Jupiter
                                ; https://github.com/upiter


                                title	<test.err.A2202>

                                .errndef	__JWASM__, "JWasm compatible assembler required!"


                                .386
                                .model	flat, stdcall
00000000                    *   _TEXT segment DWORD FLAT PUBLIC 'CODE'
00000000                    *   _TEXT ends
00000000                    *   _DATA segment DWORD FLAT PUBLIC 'DATA'
00000000                    *   _DATA ends
                            *   assume cs:flat,ds:flat,ss:flat,es:flat,fs:ERROR,gs:ERROR


                                ; Options

                                ; DIRECT_CALL		equ	1
                                ; DIRECT_CALL_FIX		equ	1


                                ; Defs
 = 0                            NULL			equ	0
                                PSTR			typedef	ptr byte

 = A                            LF			equ	10
 = D                            CR			equ	13
 = CR, LF                       EOL			equ	<CR, LF>


                                ; Imports

                                option dllimport:<kernel32.dll>

                                GetCommandLineA		proto
                                GetModuleHandleA	proto	:PSTR
                                ExitProcess		proto	:DWORD

 = GetCommandLineA              GetCommandLine		equ	<GetCommandLineA>
 = GetModuleHandleA             GetModuleHandle		equ	<GetModuleHandleA>


                                option dllimport:<msvcrt.dll>

                                printf			proto C	:ptr byte, :VARARG


                                option dllimport:none


                                ifdef	DIRECT_CALL

                                externdef	_imp__GetCommandLineA@0: ptr proc
                                externdef	_imp__GetModuleHandleA@4: ptr proc
                                externdef	_imp__ExitProcess@4: ptr proc

                                externdef C	_imp__printf: ptr proc

                                ; includelib	kernel32.lib
                                ; includelib	msvcrt.lib

                                endif	; DIRECT_CALL


                                .data
00000000                    *   _DATA segment
                            *   assume cs:ERROR

00000000 4A5741534D20544553     strAppTitle		db	'JWASM TEST: Direct Call', CR, LF, 0

                                public	AsmVersion
0000001A DC000000               AsmVersion		dd	__JWASM__	; VER_MAJOR * 100 + VER_MINOR
                                ; strAsmVerFmt		db	"JWasm version: %d.%d (%d)", 0


                                .data?
0000001E                    *   _DATA ends
00000000                    *   _BSS segment DWORD FLAT PUBLIC 'BSS'
                            *   assume cs:ERROR

00000000 00000000               hInstance		dd	?
00000004 00000000               pCommandLine		PSTR	?


                                .code
00000008                    *   _BSS ends
00000000                    *   _TEXT segment
                            *   assume cs:FLAT

                                ifdef	DIRECT_CALL
                                ifndef	DIRECT_CALL_FIX
                                endif	; DIRECT_CALL_FIX
                                endif	; DIRECT_CALL


00000000                        start	proc

                                	ifndef	DIRECT_CALL
                                	else	; DIRECT_CALL

                                	ifndef	DIRECT_CALL_FIX
                                	else	; DIRECT_CALL_FIX

00000000 6A00                   		push	NULL
00000002 FF15 00000000o         		call	_imp__GetModuleHandleA@4
00000008 A3 00000000o           		mov	hInstance, eax

0000000D FF15 00000000o         		call	_imp__GetCommandLineA@0
00000013 A3 00000000o           		mov	pCommandLine, eax

00000018 68 00000000o           		push	offset strAppTitle
0000001D FF15 00000000o         		call	_imp__printf
00000023 83C404                 		add	esp, 4*1

00000026 FF35 00000000o         		push	pCommandLine
0000002C FF15 00000000o         		call	_imp__printf
00000032 83C404                 		add	esp, 4*1

00000035 6A00                   		push	0
00000037 FF15 00000000o         		call	_imp__ExitProcess@4

                                	endif	; DIRECT_CALL_FIX

                                	endif	; DIRECT_CALL

0000003D                        start	endp

                                end	start
0000003D                    *   _TEXT ends
                            *   option DOTNAME
0000                        *   .hdr$1 segment USE16 word read public 'HDR'
0000 4D5A                   *   db 'MZ'
0002 6800010000000400       *   dw 68h, 1, 0, 4
000A 0000FFFF0000B800       *   dw 0, -1, 0, 0B8h
0012 0000000000004000       *   dw 0, 0, 0, 40h
                            *   org 40h
0040 0E                     *   push cs
0041 1F                     *   pop ds
0042 BA FFC0o               *   mov dx,@F - 40h
0045 B409                   *   mov ah,9
0047 CD21                   *   int 21h
0049 B8014C                 *   mov ax,4C01h
004C CD21                   *   int 21h
004E                        *   @@:
004E 5468697320697320612050 *   db 'This is a PE executable',0Dh,0Ah,'$'
0068                        *   .hdr$1 ends
                            *   @LPPROC typedef ptr proc
                            *   option DOTNAME
00000000                    *   .idata$2 segment dword FLAT read public alias('.rdata') 'DATA'
00000000 000000000000000000 *   DD imagerel @kernel32_dll_ilt, 0, 0, imagerel @kernel32_dll_name, imagerel @kernel32_dll_iat
00000014                    *   .idata$2 ends
00000000                    *   .idata$4 segment ALIGN(4) FLAT read public alias('.rdata') 'DATA'
00000000                    *   @kernel32_dll_ilt label dword
00000000 00000000           *   @LPPROC imagerel @ExitProcess_name
00000004 00000000           *   @LPPROC imagerel @GetModuleHandleA_name
00000008 00000000           *   @LPPROC imagerel @GetCommandLineA_name
0000000C 00000000           *   @LPPROC 0
00000010                    *   .idata$4 ends
00000000                    *   .idata$5 segment ALIGN(4) FLAT read public alias('.rdata') 'DATA'
00000000                    *   @kernel32_dll_iat label dword
00000000 00000000           *   _imp__ExitProcess@4 @LPPROC imagerel @ExitProcess_name
00000004 00000000           *   _imp__GetModuleHandleA@4 @LPPROC imagerel @GetModuleHandleA_name
00000008 00000000           *   _imp__GetCommandLineA@0 @LPPROC imagerel @GetCommandLineA_name
0000000C 00000000           *   @LPPROC 0
00000010                    *   .idata$5 ends
00000000                    *   .idata$6 segment word FLAT read public alias('.rdata') 'DATA'
00000000 0000               *   @ExitProcess_name dw 0
00000002 4578697450726F6365 *   db 'ExitProcess',0
0000000E                    *   even
0000000E 0000               *   @GetModuleHandleA_name dw 0
00000010 4765744D6F64756C65 *   db 'GetModuleHandleA',0
00000021 00                 *   even
00000022 0000               *   @GetCommandLineA_name dw 0
00000024 476574436F6D6D616E *   db 'GetCommandLineA',0
00000034                    *   even
00000034 6B65726E656C33322E *   @kernel32_dll_name db 'kernel32.dll',0
00000041 00                 *   even
00000042                    *   .idata$6 ends
00000014                    *   .idata$2 segment dword FLAT read public alias('.rdata') 'DATA'
00000014 000000000000000000 *   DD imagerel @msvcrt_dll_ilt, 0, 0, imagerel @msvcrt_dll_name, imagerel @msvcrt_dll_iat
00000028                    *   .idata$2 ends
00000010                    *   .idata$4 segment ALIGN(4) FLAT read public alias('.rdata') 'DATA'
00000010                    *   @msvcrt_dll_ilt label dword
00000010 00000000           *   @LPPROC imagerel @printf_name
00000014 00000000           *   @LPPROC 0
00000018                    *   .idata$4 ends
00000010                    *   .idata$5 segment ALIGN(4) FLAT read public alias('.rdata') 'DATA'
00000010                    *   @msvcrt_dll_iat label dword
00000010 00000000           *   _imp__printf @LPPROC imagerel @printf_name
00000014 00000000           *   @LPPROC 0
00000018                    *   .idata$5 ends
00000042                    *   .idata$6 segment word FLAT read public alias('.rdata') 'DATA'
00000042 0000               *   @printf_name dw 0
00000044 7072696E746600     *   db 'printf',0
0000004B 00                 *   even
0000004C 6D73766372742E646C *   @msvcrt_dll_name db 'msvcrt.dll',0
00000057 00                 *   even
00000058                    *   .idata$6 ends
00000000                    *   .idata$3 segment dword FLAT read public alias('.rdata') 'DATA'
00000000 000000000000000000 *   DD 0, 0, 0, 0, 0
00000014                    *   .idata$3 ends


Binary Map:

Segment                  Pos(file)     RVA  Size(fil) Size(mem)
---------------------------------------------------------------
.hdr$1                          0        0        68        68
.hdr$2                         68       68        F8        F8
.hdr$3                        160      160        A0        A0
_TEXT                         200     1000        3D        3D
.idata$2                      400     2000        28        28
.idata$3                      428     2028        14        14
.idata$4                      43C     203C        18        18
.idata$5                      454     2054        18        18
.idata$6                      46C     206C        58        58
_DATA                         600     3000        1E        1E
_BSS                            0     3020         0         8
---------------------------------------------------------------
                                                 61E      3028


Macros:

                N a m e                 Type

@CatStr  . . . . . . . . . . . .        Func
@Environ . . . . . . . . . . . .        Func
@InStr . . . . . . . . . . . . .        Func
@SizeStr . . . . . . . . . . . .        Func
@SubStr  . . . . . . . . . . . .        Func


Types:

                N a m e                 Size    Attr

@LPPROC  . . . . . . . . . . . .           4  Near32 Ptr 
PSTR . . . . . . . . . . . . . .           4  Near32 Ptr Byte


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .        GROUP
.hdr$1 . . . . . . . . . . . . .        16 Bit   0068     Word    Public  'HDR'
.hdr$2 . . . . . . . . . . . . .        32 Bit   000000F8 DWord   Public  'HDR'
.hdr$3 . . . . . . . . . . . . .        32 Bit   000000A0 DWord   Public  'HDR'
.idata$2 . . . . . . . . . . . .        32 Bit   00000028 DWord   Public  'DATA'
.idata$3 . . . . . . . . . . . .        32 Bit   00000014 DWord   Public  'DATA'
.idata$4 . . . . . . . . . . . .        32 Bit   00000018 DWord   Public  'DATA'
.idata$5 . . . . . . . . . . . .        32 Bit   00000018 DWord   Public  'DATA'
.idata$6 . . . . . . . . . . . .        32 Bit   00000058 Word    Public  'DATA'
_BSS . . . . . . . . . . . . . .        32 Bit   00000008 DWord   Public  'BSS'
_DATA  . . . . . . . . . . . . .        32 Bit   0000001E DWord   Public  'DATA'
_TEXT  . . . . . . . . . . . . .        32 Bit   0000003D DWord   Public  'CODE'


Procedures, parameters and locals:

                N a m e                 Type     Value    Segment  Length

ExitProcess  . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External (kernel32) STDCALL
GetCommandLineA  . . . . . . . .        P Near32 00000000 No Seg   00000000 *External (kernel32) STDCALL
GetModuleHandleA . . . . . . . .        P Near32 00000000 No Seg   00000000 *External (kernel32) STDCALL
printf . . . . . . . . . . . . .        P Near32 00000000 No Seg   00000000 *External (msvcrt.d) C
start  . . . . . . . . . . . . .        P Near   00000000 _TEXT    0000003D Public   STDCALL


Symbols:

                N a m e                 Type       Value     Attr

@CodeSize  . . . . . . . . . . .        Number             0h 
@DataSize  . . . . . . . . . . .        Number             0h 
@ExitProcess_name  . . . . . . .        Word               0h .idata$6 STDCALL
@GetCommandLineA_name  . . . . .        Word              22h .idata$6 STDCALL
@GetModuleHandleA_name . . . . .        Word               Eh .idata$6 STDCALL
@Interface . . . . . . . . . . .        Number             3h 
@Model . . . . . . . . . . . . .        Number             7h 
@code  . . . . . . . . . . . . .        Text   _TEXT
@data  . . . . . . . . . . . . .        Text   FLAT
@kernel32_dll_iat  . . . . . . .        DWord              0h .idata$5 STDCALL
@kernel32_dll_ilt  . . . . . . .        DWord              0h .idata$4 STDCALL
@kernel32_dll_name . . . . . . .        Byte[13]          34h .idata$6 STDCALL
@msvcrt_dll_iat  . . . . . . . .        DWord             10h .idata$5 STDCALL
@msvcrt_dll_ilt  . . . . . . . .        DWord             10h .idata$4 STDCALL
@msvcrt_dll_name . . . . . . . .        Byte[11]          4Ch .idata$6 STDCALL
@pe_file_flags . . . . . . . . .        Number           10Fh 
@printf_name . . . . . . . . . .        Word              42h .idata$6 STDCALL
@stack . . . . . . . . . . . . .        Text   FLAT
AsmVersion . . . . . . . . . . .        DWord             1Ah _DATA Public STDCALL
CR . . . . . . . . . . . . . . .        Number             Dh 
DIRECT_CALL  . . . . . . . . . .        Text   1
DIRECT_CALL_FIX  . . . . . . . .        Text   1
EOL  . . . . . . . . . . . . . .        Text   CR, LF
GetCommandLine . . . . . . . . .        Text   GetCommandLineA
GetModuleHandle  . . . . . . . .        Text   GetModuleHandleA
L&_0001  . . . . . . . . . . . .        L Near            4Eh .hdr$1 STDCALL
LF . . . . . . . . . . . . . . .        Number             Ah 
NULL . . . . . . . . . . . . . .        Number             0h 
_imp__ExitProcess@4  . . . . . .        @LPPROC            0h .idata$5 Public STDCALL
_imp__GetCommandLineA@0  . . . .        @LPPROC            8h .idata$5 Public STDCALL
_imp__GetModuleHandleA@4 . . . .        @LPPROC            4h .idata$5 Public STDCALL
_imp__printf . . . . . . . . . .        @LPPROC           10h .idata$5 Public C
hInstance  . . . . . . . . . . .        DWord              0h _BSS STDCALL
pCommandLine . . . . . . . . . .        PSTR               4h _BSS STDCALL
strAppTitle  . . . . . . . . . .        Byte[26]           0h _DATA STDCALL

test.err.A2202.asm: 198 lines, 2 passes, 0 ms, 0 warnings, 0 errors
