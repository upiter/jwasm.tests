78a79,81
>                              1C 		option	dllimport:<kernel32.dll>
>                              1C 
>                              1C 
99a103,105
>                              1C 		option	dllimport:<msvcrt.dll>
>                              1C 
>                              1C 
110a117,119
>                              1C 		option	dllimport:none
>                              1C 
>                              1C 
116,117d124
<                                 includelib	kernel32.lib
<                                 includelib	msvcrt.lib
186,195c193,204
< 00000011 E8 00000000r       *    call OutputDebugStringA
< 00000016                        	invoke	printf, rsi
< 00000016 488BCE             *    mov rcx, rsi
< 00000019 E8 00000000r       *    call printf
< 
< 0000001E 488D4DF0               	lea	rcx, strLf
< 00000022 B80A000000             	mov	eax, 0Ah	; LF
< 00000027 8901                   	mov	[rcx], eax
< 00000029                        	invoke	printf, rcx
< 00000029 E8 00000000r       *    call printf
---
>                             *    externdef __imp_OutputDebugStringA: ptr proc
> 00000011 FF15 00000000r     *    call __imp_OutputDebugStringA
> 00000017                        	invoke	printf, rsi
> 00000017 488BCE             *    mov rcx, rsi
>                             *    externdef __imp_printf: ptr proc
> 0000001A FF15 00000000r     *    call __imp_printf
> 
> 00000020 488D4DF0               	lea	rcx, strLf
> 00000024 B80A000000             	mov	eax, 0Ah	; LF
> 00000029 8901                   	mov	[rcx], eax
> 0000002B                        	invoke	printf, rcx
> 0000002B FF15 00000000r     *    call __imp_printf
198,201c207,210
< 0000002E 4883C428           *   add rsp, 8 + @ReservedStack
< 00000032 5E                 *   pop rsi
< 00000033 5D                 *   pop rbp
< 00000034 C3                 *   retn 
---
> 00000031 4883C428           *   add rsp, 8 + @ReservedStack
> 00000035 5E                 *   pop rsi
> 00000036 5D                 *   pop rbp
> 00000037 C3                 *   retn 
203c212
< 00000035                    *   .xdata segment align(8) flat read 'DATA'
---
> 00000038                    *   .xdata segment align(8) flat read 'DATA'
210c219
< 00000000 000000003500000000 *   dd imagerel print, imagerel print+035h, imagerel $xdatasym+00h
---
> 00000000 000000003800000000 *   dd imagerel print, imagerel print+038h, imagerel $xdatasym+00h
212c221
< 00000035                        print	endp
---
> 00000038                        print	endp
250,251c259,261
< 0000007F E8 00000000r       *    call sprintf
< 00000084 488D05 00000000r       	lea	rax, strBuffer
---
>                             *    externdef __imp_sprintf: ptr proc
> 0000007F FF15 00000000r     *    call __imp_sprintf
> 00000085 488D05 00000000r       	lea	rax, strBuffer
254,256c264,266
< 0000008B 4883C430           *   add rsp, 0 + @ReservedStack
< 0000008F 5D                 *   pop rbp
< 00000090 C3                 *   retn 
---
> 0000008C 4883C430           *   add rsp, 0 + @ReservedStack
> 00000090 5D                 *   pop rbp
> 00000091 C3                 *   retn 
258c268
< 00000091                    *   .xdata segment
---
> 00000092                    *   .xdata segment
264c274
< 0000000C 00000000510000000C *   dd imagerel asm_ver, imagerel asm_ver+051h, imagerel $xdatasym+0Ch
---
> 0000000C 00000000520000000C *   dd imagerel asm_ver, imagerel asm_ver+052h, imagerel $xdatasym+0Ch
266c276
< 00000091                        asm_ver	endp
---
> 00000092                        asm_ver	endp
297,312c307,322
< 000000E6 E8 00000000r       *    call sprintf
< 000000EB                        	invoke	print, addr strBuffer
< 000000EB 488D0D 00000000r   *    lea rcx, strBuffer
< 000000F2 E809FFFFFF         *    call print
< 
< 000000F7 488B15 00000000r       	mov	rdx, DbgApi.OutputDebugStringA
< 000000FE                        	.if	rdx
< 000000FE 4823D2             *   and rdx, rdx
< 00000101 7404               *   jz  @C0001
< 00000103 33C0                   		xor	eax, eax
< 00000105                        	.else
< 00000105 EB02               *   jmp @C0002
< 00000107                    *   @C0001:
< 00000107 0CFF                   		or	al, -1
< 00000109                        	.endif
< 00000109                    *   @C0002:
---
> 000000E6 FF15 00000000r     *    call __imp_sprintf
> 000000EC                        	invoke	print, addr strBuffer
> 000000EC 488D0D 00000000r   *    lea rcx, strBuffer
> 000000F3 E808FFFFFF         *    call print
> 
> 000000F8 488B15 00000000r       	mov	rdx, DbgApi.OutputDebugStringA
> 000000FF                        	.if	rdx
> 000000FF 4823D2             *   and rdx, rdx
> 00000102 7404               *   jz  @C0001
> 00000104 33C0                   		xor	eax, eax
> 00000106                        	.else
> 00000106 EB02               *   jmp @C0002
> 00000108                    *   @C0001:
> 00000108 0CFF                   		or	al, -1
> 0000010A                        	.endif
> 0000010A                    *   @C0002:
315,317c325,327
< 00000109 4883C420           *   add rsp, 0 + @ReservedStack
< 0000010D 5D                 *   pop rbp
< 0000010E C3                 *   retn 
---
> 0000010A 4883C420           *   add rsp, 0 + @ReservedStack
> 0000010E 5D                 *   pop rbp
> 0000010F C3                 *   retn 
319c329
< 0000010F                    *   .xdata segment
---
> 00000110                    *   .xdata segment
325c335
< 00000018 000000006F00000018 *   dd imagerel main, imagerel main+06Fh, imagerel $xdatasym+018h
---
> 00000018 000000007000000018 *   dd imagerel main, imagerel main+070h, imagerel $xdatasym+018h
327c337
< 0000010F                        main	endp
---
> 00000110                        main	endp
335,348c345,361
< 00000116 E8 00000000r       *    call GetModuleHandleA
< 0000011B 488905 00000000r       	mov	hInstance, rax
< 
< 00000122                        	invoke	GetCommandLineA
< 00000122 E8 00000000r       *    call GetCommandLineA
< 00000127 488905 00000000r       	mov	CommandLine, rax
< 
< 0000012E                        	invoke	main, hInstance, rax
< 0000012E 488B0D 00000000r   *    mov rcx, hInstance
< 00000135 488BD0             *    mov rdx, rax
< 00000138 E863FFFFFF         *    call main
< 0000013D                        	invoke	ExitProcess, eax
< 0000013D 8BC8               *    mov ecx, eax
< 0000013F E8 00000000r       *    call ExitProcess
---
>                             *    externdef __imp_GetModuleHandleA: ptr proc
> 00000116 FF15 00000000r     *    call __imp_GetModuleHandleA
> 0000011C 488905 00000000r       	mov	hInstance, rax
> 
> 00000123                        	invoke	GetCommandLineA
>                             *    externdef __imp_GetCommandLineA: ptr proc
> 00000123 FF15 00000000r     *    call __imp_GetCommandLineA
> 00000129 488905 00000000r       	mov	CommandLine, rax
> 
> 00000130                        	invoke	main, hInstance, rax
> 00000130 488B0D 00000000r   *    mov rcx, hInstance
> 00000137 488BD0             *    mov rdx, rax
> 0000013A E861FFFFFF         *    call main
> 0000013F                        	invoke	ExitProcess, eax
> 0000013F 8BC8               *    mov ecx, eax
>                             *    externdef __imp_ExitProcess: ptr proc
> 00000141 FF15 00000000r     *    call __imp_ExitProcess
351,352c364,365
< 00000144 4883C428           *   add rsp, 8 + @ReservedStack
< 00000148 C3                 *   retn
---
> 00000147 4883C428           *   add rsp, 8 + @ReservedStack
> 0000014B C3                 *   retn
354c367
< 00000149                        start	endp
---
> 0000014C                        start	endp
357c370
< 00000149                    *   _TEXT ends
---
> 0000014C                    *   _TEXT ends
403c416
< _TEXT  . . . . . . . . . . . . .        64 Bit   00000149 Para    Public  'CODE'
---
> _TEXT  . . . . . . . . . . . . .        64 Bit   0000014C Para    Public  'CODE'
410,418c423,431
< ExitProcess  . . . . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
< GetCommandLineA  . . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
< GetModuleHandleA . . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
< GetStartupInfoA  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
< GetStartupInfoW  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
< OutputDebugStringA . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
< OutputDebugStringW . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
< __getmainargs  . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
< asm_ver  . . . . . . . . . . . .        P Near   00000040 _TEXT    00000051 Public   FASTCALL
---
> ExitProcess  . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External (kernel32) FASTCALL
> GetCommandLineA  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External (kernel32) FASTCALL
> GetModuleHandleA . . . . . . . .        P Near64 00000000 No Seg   00000000 *External (kernel32) FASTCALL
> GetStartupInfoA  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External (kernel32) FASTCALL
> GetStartupInfoW  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External (kernel32) FASTCALL
> OutputDebugStringA . . . . . . .        P Near64 00000000 No Seg   00000000 External  (kernel32) FASTCALL
> OutputDebugStringW . . . . . . .        P Near64 00000000 No Seg   00000000 External  (kernel32) FASTCALL
> __getmainargs  . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External (msvcrt.d) FASTCALL
> asm_ver  . . . . . . . . . . . .        P Near   00000040 _TEXT    00000052 Public   FASTCALL
420c433
< main . . . . . . . . . . . . . .        P Near   000000A0 _TEXT    0000006F Public   FASTCALL
---
> main . . . . . . . . . . . . . .        P Near   000000A0 _TEXT    00000070 Public   FASTCALL
423,425c436,438
<   @C0001 . . . . . . . . . . . .        L Near   00000107 _TEXT
<   @C0002 . . . . . . . . . . . .        L Near   00000109 _TEXT
< print  . . . . . . . . . . . . .        P Near   00000000 _TEXT    00000035 Public   FASTCALL
---
>   @C0001 . . . . . . . . . . . .        L Near   00000108 _TEXT
>   @C0002 . . . . . . . . . . . .        L Near   0000010A _TEXT
> print  . . . . . . . . . . . . .        P Near   00000000 _TEXT    00000038 Public   FASTCALL
428,430c441,443
< printf . . . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
< sprintf  . . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
< start  . . . . . . . . . . . . .        P Near   00000110 _TEXT    00000039 Public   FASTCALL
---
> printf . . . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External (msvcrt.d) FASTCALL
> sprintf  . . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External (msvcrt.d) FASTCALL
> start  . . . . . . . . . . . . .        P Near   00000110 _TEXT    0000003C Public   FASTCALL
448a462
> DIRECT_IMPORTS . . . . . . . . .        Text   
456a471,476
> __imp_ExitProcess  . . . . . . .        Near               0h _TEXT External FASTCALL
> __imp_GetCommandLineA  . . . . .        Near               0h _TEXT External FASTCALL
> __imp_GetModuleHandleA . . . . .        Near               0h _TEXT External FASTCALL
> __imp_OutputDebugStringA . . . .        Near               0h _TEXT External FASTCALL
> __imp_printf . . . . . . . . . .        Near               0h _TEXT External FASTCALL
> __imp_sprintf  . . . . . . . . .        Near               0h _TEXT External FASTCALL
464c484
< test.pe.imports.ref.asm: 178 lines, 2 passes, 0 ms, 0 warnings, 0 errors
---
> test.pe.imports.ref.asm: 178 lines, 2 passes, 1 ms, 0 warnings, 0 errors
