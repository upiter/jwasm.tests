JWasm v2.19, Oct 21 2025
test.pe.imports.ref.asm
                                ; test.pe.imports.ref.asm

                                ; Import data reference

                                ; Build:
                                ; jwasm -pe test.pe.imports.ref.asm
                                ; make


                                title	pe_imports

                                .errndef	__JWASM__, "JWasm compatible assembler required!"


                                ; Options

 = 1                            PE_IMP_REF	equ	1
                                ; DIRECT_IMPORTS	equ	1
                                ; DIRECT_IMPORTS_FIX	equ	1


                                .x64
                                .model	flat, fastcall
00000000                    *   _TEXT segment PARA FLAT PUBLIC 'CODE'
00000000                    *   _TEXT ends
00000000                    *   _DATA segment PARA FLAT PUBLIC 'DATA'
00000000                    *   _DATA ends
                            *   assume cs:flat,ds:flat,ss:flat,es:flat,fs:ERROR,gs:NOTHING
                                option	casemap:none

                                option	procalign:16

                                option	frame:auto
                                option	win64:3


                                ; Types
                                include		defs.inc
                              C ; defs.inc
                              C 
                              C ; Types
                              C 
                              C UINT		typedef	DWORD
                              C PSTR		typedef	ptr
                              C PCSTR		typedef	ptr
                              C PCWSTR		typedef	ptr
                              C HINSTANCE	typedef	QWORD
 = 0                          C NULL		equ	0
                              C 
 = export FRAME               C EFRAME		textequ	<export FRAME>


                                ; Imports
                                ; ifdef	DIRECT_IMPORTS
                                include		imports.inc
                              C ; imports.inc
                              C 
                              C dllimp	macro	dllname
 >                            C 
 >                            C 	ifdef	DIRECT_IMPORTS
 >                            C 
 >                            C 	ifb	<dllname>
 >                            C 		option	dllimport:none
 >                            C 	else
 >                            C 		option	dllimport:<dllname>
 >                            C 	endif
 >                            C 
 >                            C 	endif	; DIRECT_IMPORTS
 >                            C 
 >                            C endm
                              C 
                              C 
                              C ; Imports
                              C 
                              C dllimp	kernel32.dll
                             1C 
                             1C 
                              C 
                              C GetModuleHandleA	proto	lpModuleName:PCSTR
 = GetModuleHandleA           C GetModuleHandle		textequ	<GetModuleHandleA>
                              C 
                              C GetCommandLineA		proto
 = GetCommandLineA            C GetCommandLine		textequ	<GetCommandLineA>
                              C 
                              C GetStartupInfoA		proto	lpStartupInfo:ptr
                              C GetStartupInfoW		proto	lpStartupInfo:ptr
 = GetStartupInfoA            C GetStartupInfo		textequ	<GetStartupInfoA>
                              C 
                              C OutputDebugStringA	proto	lpOutputString:PCSTR
                              C OutputDebugStringW	proto	lpOutputString:PCWSTR
 = OutputDebugStringA         C OutputDebugString	textequ	<OutputDebugStringA>
                              C 
                              C ExitProcess		proto	uExitCode:UINT
                              C 
                              C 
                              C dllimp	msvcrt.dll
                             1C 
                             1C 
                              C 
                              C __getmainargs		proto	argc:ptr, argv:ptr, env:ptr, doWildCard:dword, startInfo:ptr
 = __getmainargs              C getmainargs		textequ	<__getmainargs>
                              C 
                              C printf			proto	format:ptr byte, :vararg
                              C sprintf			proto	buffer:ptr byte, format:ptr byte, :vararg
                              C 
                              C 
                              C dllimp	; required, dllimport terminator
                             1C 
                             1C 
                                ; else
                                ; include	kernel32.inc
                                ; include	msvcrt.inc

                                ; ifndef	DIRECT_IMPORTS
                                includelib	kernel32.lib
                                includelib	msvcrt.lib
                                ; endif


                                ; OutputDebugString
                                fn_OutputDebugString	typedef	proto	msg:ptr
                                pfn_OutputDebugString	typedef ptr	fn_OutputDebugString

00000000                        DBG_API	struct
00000000                        	OutputDebugStringA	pfn_OutputDebugString	?
00000008                        	OutputDebugStringW	pfn_OutputDebugString	?
00000010                        DBG_API	ends


                                .data
00000000                    *   _DATA segment
                            *   assume cs:ERROR

00000000 496D706F7274207265     AppName			db	"Import reference", 0
00000011 416464726573732040     szFmt			db	"Address @ %p", 0

                                Public	AsmVersion
0000001E DB000000               AsmVersion		dd	__JWASM__	; VER_MAJOR * 100 + VER_MINOR
00000022 4A5761736D20766572     szAsmVerFmt		db	"JWasm version: %d.%d (%d)", 0

0000003C 00000000               align	10h

                                ; Testing direct import reference
                                Public	DbgApi

                                ifdef	DIRECT_IMPORTS_FIX
                                else

00000040 000000000000000000     DbgApi			DBG_API	<OutputDebugStringA, OutputDebugStringW>

                                endif	; DIRECT_IMPORTS_FIX

00000050                        align	10h

                                ; Direct import address
                                ; pOutputDebugStringA	dq	_imp__OutputDebugStringA


                                .data?
00000050                    *   _DATA ends
00000000                    *   _BSS segment PARA FLAT PUBLIC 'BSS'
                            *   assume cs:ERROR

00000000 0000000000000000       hInstance		HINSTANCE	?
00000008 0000000000000000       CommandLine		PSTR		?

00000010                        align	10h
00000010 000000000000000000     strBuffer		db 200h dup (?)


                                .code
00000210                    *   _BSS ends
00000000                    *   _TEXT segment
                            *   assume cs:FLAT

00000000                        print	proc export FRAME	uses rsi msg:ptr

                                	Local	strLf	:QWORD

00000000 48894C2408         *   mov [rsp+8], rcx
00000005 55                 *   push rbp
                            *   .pushreg rbp
00000006 488BEC             *   mov rbp, rsp
                            *   .setframe rbp, 0
00000009 56                 *   push rsi
                            *   .pushreg rsi
0000000A 4883EC28           *   sub rsp, 8 + @ReservedStack
                            *   .allocstack 8 + @ReservedStack
                            *   .endprolog
0000000E 488BF1                 	mov	rsi, rcx
00000011                        	invoke	OutputDebugStringA, rcx
00000011 E8 00000000r       *    call OutputDebugStringA
00000016                        	invoke	printf, rsi
00000016 488BCE             *    mov rcx, rsi
00000019 E8 00000000r       *    call printf

0000001E 488D4DF0               	lea	rcx, strLf
00000022 B80A000000             	mov	eax, 0Ah	; LF
00000027 8901                   	mov	[rcx], eax
00000029                        	invoke	printf, rcx
00000029 E8 00000000r       *    call printf

                                	ret
0000002E 4883C428           *   add rsp, 8 + @ReservedStack
00000032 5E                 *   pop rsi
00000033 5D                 *   pop rbp
00000034 C3                 *   retn 

00000035                    *   .xdata segment align(8) flat read 'DATA'
00000000                    *   $xdatasym label near
00000000 010E0405           *   db 1t + (00h shl 3), 14t, 4t, 05h + (00h shl 4)
00000004 0E420A6009530650   *   dw 0420eh, 0600ah, 05309h, 05006h
0000000C                    *   align 4
0000000C                    *   .xdata ends
00000000                    *   .pdata segment align(4) flat read 'DATA'
00000000 000000003500000000 *   dd imagerel print, imagerel print+035h, imagerel $xdatasym+00h
0000000C                    *   .pdata ends
00000035                        print	endp


 = A3D70A3D                     div100	equ	0A3D70A3Dh

                                Public	asm_ver
00000040                        asm_ver	proc export FRAME	version:DWORD

                                	; mov	ecx, version
00000040 48894C2408         *   mov [rsp+8], rcx
00000045 55                 *   push rbp
                            *   .pushreg rbp
00000046 488BEC             *   mov rbp, rsp
                            *   .setframe rbp, 0
00000049 4883EC30           *   sub rsp, 0 + @ReservedStack
                            *   .allocstack 0 + @ReservedStack
                            *   .endprolog
0000004D 8BC1                   	mov	eax, ecx

                                	; mov
0000004F BA3D0AD7A3             	mov	edx, div100
00000054 FFC0                   	inc	eax
00000056 F7E2                   	mul	edx
00000058 C1EA06                 	shr	edx, 6

0000005B 448BC2                 	mov	r8d, edx	; major version

0000005E 8BC2                   	mov	eax, edx
00000060 BA64000000             	mov	edx, 100
00000065 F7E2                   	mul	edx

00000067 448BC9                 	mov	r9d, ecx
0000006A 442BC8                 	sub	r9d, eax	; minor version

0000006D                        	invoke	sprintf, addr strBuffer, addr szAsmVerFmt, r8d, r9d, ecx
0000006D 894C2420           *    mov [rsp+32], ecx
00000071 488D0D 00000000r   *    lea rcx, strBuffer
00000078 488D15 00000000r   *    lea rdx, szAsmVerFmt
0000007F E8 00000000r       *    call sprintf
00000084 488D05 00000000r       	lea	rax, strBuffer

                                	ret
0000008B 4883C430           *   add rsp, 0 + @ReservedStack
0000008F 5D                 *   pop rbp
00000090 C3                 *   retn 

00000091                    *   .xdata segment
0000000C 010D0305           *   db 1t + (00h shl 3), 13t, 3t, 05h + (00h shl 4)
00000010 0D5209530650       *   dw 0320dh, 05309h, 05006h
00000016 0000               *   align 4
00000018                    *   .xdata ends
0000000C                    *   .pdata segment
0000000C 00000000510000000C *   dd imagerel asm_ver, imagerel asm_ver+051h, imagerel $xdatasym+0Ch
00000018                    *   .pdata ends
00000091                        asm_ver	endp


                                public	main
000000A0                        main	proc export FRAME	hInst:HINSTANCE, CmdLine:PSTR

000000A0 48894C2408         *   mov [rsp+8], rcx
000000A5 4889542410         *   mov [rsp+16], rdx
000000AA 55                 *   push rbp
                            *   .pushreg rbp
000000AB 488BEC             *   mov rbp, rsp
                            *   .setframe rbp, 0
000000AE 4883EC20           *   sub rsp, 0 + @ReservedStack
                            *   .allocstack 0 + @ReservedStack
                            *   .endprolog
000000B2                        	invoke	print, addr AppName
000000B2 488D0D 00000000r   *    lea rcx, AppName
000000B9 E842FFFFFF         *    call print

                                	; JWasm assembler version
000000BE                        	invoke	asm_ver, AsmVersion
000000BE 8B0D 00000000r     *    mov ecx, AsmVersion
000000C4 E877FFFFFF         *    call asm_ver
000000C9                        	invoke	print, rax
000000C9 488BC8             *    mov rcx, rax
000000CC E82FFFFFFF         *    call print

000000D1                        	invoke	sprintf, addr strBuffer, addr szFmt, DbgApi.OutputDebugStringA
000000D1 4C8B05 00000000r   *    mov r8, DbgApi.OutputDebugStringA
000000D8 488D0D 00000000r   *    lea rcx, strBuffer
000000DF 488D15 00000000r   *    lea rdx, szFmt
000000E6 E8 00000000r       *    call sprintf
000000EB                        	invoke	print, addr strBuffer
000000EB 488D0D 00000000r   *    lea rcx, strBuffer
000000F2 E809FFFFFF         *    call print

000000F7 488B15 00000000r       	mov	rdx, DbgApi.OutputDebugStringA
000000FE                        	.if	rdx
000000FE 4823D2             *   and rdx, rdx
00000101 7404               *   jz  @C0001
00000103 33C0                   		xor	eax, eax
00000105                        	.else
00000105 EB02               *   jmp @C0002
00000107                    *   @C0001:
00000107 0CFF                   		or	al, -1
00000109                        	.endif
00000109                    *   @C0002:

                                	ret
00000109 4883C420           *   add rsp, 0 + @ReservedStack
0000010D 5D                 *   pop rbp
0000010E C3                 *   retn 

0000010F                    *   .xdata segment
00000018 01120305           *   db 1t + (00h shl 3), 18t, 3t, 05h + (00h shl 4)
0000001C 12320E530B50       *   dw 03212h, 0530eh, 0500bh
00000022 0000               *   align 4
00000024                    *   .xdata ends
00000018                    *   .pdata segment
00000018 000000006F00000018 *   dd imagerel main, imagerel main+06Fh, imagerel $xdatasym+018h
00000024                    *   .pdata ends
0000010F                        main	endp


00000110                        start	proc

00000110 4883EC28           *   sub rsp, 8 + @ReservedStack
00000114 33C9                   	xor	ecx, ecx
00000116                        	invoke	GetModuleHandleA, rcx
00000116 E8 00000000r       *    call GetModuleHandleA
0000011B 488905 00000000r       	mov	hInstance, rax

00000122                        	invoke	GetCommandLineA
00000122 E8 00000000r       *    call GetCommandLineA
00000127 488905 00000000r       	mov	CommandLine, rax

0000012E                        	invoke	main, hInstance, rax
0000012E 488B0D 00000000r   *    mov rcx, hInstance
00000135 488BD0             *    mov rdx, rax
00000138 E863FFFFFF         *    call main
0000013D                        	invoke	ExitProcess, eax
0000013D 8BC8               *    mov ecx, eax
0000013F E8 00000000r       *    call ExitProcess

                                	ret
00000144 4883C428           *   add rsp, 8 + @ReservedStack
00000148 C3                 *   retn

00000149                        start	endp

                                end	start
00000149                    *   _TEXT ends


Macros:

                N a m e                 Type

@CatStr  . . . . . . . . . . . .        Func
@Environ . . . . . . . . . . . .        Func
@InStr . . . . . . . . . . . . .        Func
@SizeStr . . . . . . . . . . . .        Func
@SubStr  . . . . . . . . . . . .        Func
dllimp . . . . . . . . . . . . .        Proc


Structures and Unions:

                N a m e                 Size/Ofs   Type

DBG_API  . . . . . . . . . . . .              10
  OutputDebugStringA . . . . . .               0   pfn_OutputDebugString
  OutputDebugStringW . . . . . .               8   pfn_OutputDebugString


Types:

                N a m e                 Size    Attr

HINSTANCE  . . . . . . . . . . .           8  QWord
PCSTR  . . . . . . . . . . . . .           8  Near Ptr 
PCWSTR . . . . . . . . . . . . .           8  Near Ptr 
PSTR . . . . . . . . . . . . . .           8  Near Ptr 
UINT . . . . . . . . . . . . . .           4  DWord
fn_OutputDebugString . . . . . .           8  Proc L Near64 FASTCALL
pfn_OutputDebugString  . . . . .           8  Near Ptr 


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .        GROUP
.pdata . . . . . . . . . . . . .        64 Bit   00000024 DWord   Private 'DATA'
.xdata . . . . . . . . . . . . .        64 Bit   00000024 QWord   Private 'DATA'
_BSS . . . . . . . . . . . . . .        64 Bit   00000210 Para    Public  'BSS'
_DATA  . . . . . . . . . . . . .        64 Bit   00000050 Para    Public  'DATA'
_TEXT  . . . . . . . . . . . . .        64 Bit   00000149 Para    Public  'CODE'


Procedures, parameters and locals:

                N a m e                 Type     Value    Segment  Length

ExitProcess  . . . . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
GetCommandLineA  . . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
GetModuleHandleA . . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
GetStartupInfoA  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
GetStartupInfoW  . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
OutputDebugStringA . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
OutputDebugStringW . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
__getmainargs  . . . . . . . . .        P Near64 00000000 No Seg   00000000 *External FASTCALL
asm_ver  . . . . . . . . . . . .        P Near   00000040 _TEXT    00000051 Public   FASTCALL
  version  . . . . . . . . . . .        DWord             rbp + 0010
main . . . . . . . . . . . . . .        P Near   000000A0 _TEXT    0000006F Public   FASTCALL
  CmdLine  . . . . . . . . . . .        Near              rbp + 0018
  hInst  . . . . . . . . . . . .        QWord             rbp + 0010
  @C0001 . . . . . . . . . . . .        L Near   00000107 _TEXT
  @C0002 . . . . . . . . . . . .        L Near   00000109 _TEXT
print  . . . . . . . . . . . . .        P Near   00000000 _TEXT    00000035 Public   FASTCALL
  msg  . . . . . . . . . . . . .        Near              rbp + 0010
  strLf  . . . . . . . . . . . .        QWord             rbp - 0010
printf . . . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
sprintf  . . . . . . . . . . . .        P Near64 00000000 No Seg   00000000 External  FASTCALL
start  . . . . . . . . . . . . .        P Near   00000110 _TEXT    00000039 Public   FASTCALL


Symbols:

                N a m e                 Type       Value     Attr

$xdatasym  . . . . . . . . . . .        L Near             0h .xdata FASTCALL
@CodeSize  . . . . . . . . . . .        Number             0h 
@DataSize  . . . . . . . . . . .        Number             0h 
@Interface . . . . . . . . . . .        Number             7h 
@Model . . . . . . . . . . . . .        Number             7h 
@ReservedStack . . . . . . . . .        Number            20h 
@code  . . . . . . . . . . . . .        Text   _TEXT
@data  . . . . . . . . . . . . .        Text   FLAT
@stack . . . . . . . . . . . . .        Text   FLAT
AppName  . . . . . . . . . . . .        Byte[17]           0h _DATA FASTCALL
AsmVersion . . . . . . . . . . .        DWord             1Eh _DATA Public FASTCALL
CommandLine  . . . . . . . . . .        PSTR               8h _BSS FASTCALL
DbgApi . . . . . . . . . . . . .        DBG_API           40h _DATA Public FASTCALL
EFRAME . . . . . . . . . . . . .        Text   export FRAME
GetCommandLine . . . . . . . . .        Text   GetCommandLineA
GetModuleHandle  . . . . . . . .        Text   GetModuleHandleA
GetStartupInfo . . . . . . . . .        Text   GetStartupInfoA
NULL . . . . . . . . . . . . . .        Number             0h 
OutputDebugString  . . . . . . .        Text   OutputDebugStringA
PE_IMP_REF . . . . . . . . . . .        Number             1h 
div100 . . . . . . . . . . . . .        Number      A3D70A3Dh 
getmainargs  . . . . . . . . . .        Text   __getmainargs
hInstance  . . . . . . . . . . .        HINSTANCE          0h _BSS FASTCALL
strBuffer  . . . . . . . . . . .        Byte[512]         10h _BSS FASTCALL
szAsmVerFmt  . . . . . . . . . .        Byte[26]          22h _DATA FASTCALL
szFmt  . . . . . . . . . . . . .        Byte[13]          11h _DATA FASTCALL

test.pe.imports.ref.asm: 192 lines, 2 passes, 1 ms, 0 warnings, 0 errors
